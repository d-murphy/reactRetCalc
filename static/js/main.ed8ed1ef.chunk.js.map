{"version":3,"sources":["App.js","index.js"],"names":["App","invTotals","withdrawTotals","i","x","y","state","savedScenarios","savedInvTotals","savedWithdrawTotals","currentInvTotals","currentWithdrawTotals","currentParams","startingAge","invStartAge","invEndAge","oneTimeInvAge","withdrawAge","startingInv","annualInv","oneTimeInv","invGrowth","withRate","fixYAxis","setStateHandler","bind","saveState","doCalc","printState","this","e","newValue","target","offsetParent","id","setState","name","checked","console","log","newInvTots","newWithdrawTots","yearTot","yearWith","parseFloat","parseInt","Container","className","maxWidth","Grid","container","spacing","direction","alignItems","item","xs","Paper","justify","Switch","onChange","color","Button","variant","onClick","lineToPlot","scenarios","yMax","React","Component","ScenTable","props","length","style","padding","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","map","scen","index","key","data","colorKey","scenName","colors","TRow","Plots","margin","left","height","yDomain","Inputs","Slider","defaultValue","min","max","valueLabelDisplay","onChangeCommitted","step","Tooltip","placement","title","IconButton","aria-label","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ed8ed1ef.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport '../node_modules/react-vis/dist/style.css';\r\nimport {FlexibleXYPlot , XAxis, YAxis, LineSeries} from 'react-vis';\r\nimport {Container, Paper, Grid, Slider, Tooltip, IconButton, Switch, Button} from '@material-ui/core';\r\nimport {TableContainer, Table, TableBody, TableCell, TableHead, TableRow } from '@material-ui/core'\r\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    let invTotals = [];\r\n    let withdrawTotals = [];\r\n    for(let i=18; i<81; i++){\r\n      invTotals[i-18] = {x: i, y: 0}\r\n      withdrawTotals[i-18] = {x: i, y: 0}\r\n    }\r\n    this.state = {\r\n        savedScenarios: [],\r\n        savedInvTotals: [], \r\n        savedWithdrawTotals: [],\r\n        currentInvTotals: invTotals,\r\n        currentWithdrawTotals: withdrawTotals,\r\n        currentParams: {\r\n          startingAge: 18, \r\n          invStartAge: 25, \r\n          invEndAge: 55,\r\n          oneTimeInvAge: 30, \r\n          withdrawAge: 55,\r\n          startingInv: 5000,\r\n          annualInv: 0, \r\n          oneTimeInv: 0,\r\n          invGrowth: 7, \r\n          withRate: 4,  \r\n          fixYAxis: true\r\n        }\r\n    };\r\n    this.setStateHandler = this.setStateHandler.bind(this);\r\n    this.saveState = this.saveState.bind(this);\r\n    this.doCalc = this.doCalc.bind(this);\r\n    this.printState = this.printState.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.doCalc();\r\n  }\r\n  \r\n  setStateHandler(e, newValue) {\r\n    if (e.target.offsetParent.id === \"invRange\"){\r\n      this.setState({\r\n        currentParams: {\r\n          ...this.state.currentParams,\r\n          [\"invStartAge\"]: newValue[0],\r\n          [\"invEndAge\"]: newValue[1]  \r\n        }\r\n      })\r\n    } else if(e.target.offsetParent.id === \"startEndAge\"){\r\n      this.setState({\r\n        currentParams: {\r\n          ...this.state.currentParams,\r\n          [\"startingAge\"]: newValue[0],\r\n          [\"withdrawAge\"]: newValue[1]\r\n        }\r\n      })        \r\n    } else if(e.target.name===\"fixYAxis\") {\r\n      this.setState({\r\n        currentParams: {\r\n          ...this.state.currentParams,\r\n          [e.target.name]: e.target.checked\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        currentParams: {\r\n          ...this.state.currentParams,\r\n          [e.target.offsetParent.id]: newValue\r\n        }\r\n      })\r\n    }\r\n    this.doCalc()\r\n  }\r\n\r\n  printState(){\r\n    console.log(this.state);\r\n  }\r\n\r\n  saveState() {\r\n    this.setState((state) => {\r\n      const scens = [...state.savedScenarios, state.currentParams]\r\n      const invTots = [...state.savedInvTotals, state.currentInvTotals]\r\n      const withTots = [...state.savedWithdrawTotals, state.currentWithdrawTotals]\r\n      return {\r\n        savedScenarios: scens,\r\n        savedInvTotals: invTots,\r\n        savedWithdrawTotals: withTots, \r\n      }\r\n    })\r\n}\r\n\r\n\r\n\r\n  doCalc() {\r\n    let newInvTots = [];\r\n    let newWithdrawTots = [];\r\n    for(let i=18; i<81; i++){\r\n      let yearTot = 0;\r\n      let yearWith = 0;\r\n      // Add interest to last years total.  Starts after year 18.\r\n      if(i>18){\r\n        yearTot += newInvTots[i-19].y * (1 + (parseFloat(this.state.currentParams.invGrowth)/100))\r\n      }\r\n      // withdraw funds if appropriate\r\n      if(i>=parseInt(this.state.currentParams.withdrawAge)){\r\n        yearWith = newInvTots[i-19].y * (parseFloat(this.state.currentParams.withRate)/100)\r\n        yearTot -= yearWith\r\n      }\r\n      // find the starting age and include that total\r\n      if(i===parseInt(this.state.currentParams.startingAge)){\r\n        yearTot += parseFloat(this.state.currentParams.startingInv)\r\n      }\r\n      // add in one time investment at appropripate year\r\n      if(i===parseInt(this.state.currentParams.oneTimeInvAge)){\r\n        yearTot += parseFloat(this.state.currentParams.oneTimeInv)\r\n      }\r\n      // add in annual investment for appropriate years\r\n      if(i>=this.state.currentParams.invStartAge & i<=this.state.currentParams.invEndAge){\r\n        yearTot += parseFloat(this.state.currentParams.annualInv)\r\n      }\r\n\r\n      newInvTots[i-18] = {x: i, y: yearTot}\r\n      newWithdrawTots[i-18] = {x: i, y: yearWith}\r\n      \r\n    }\r\n    this.setState({currentInvTotals: newInvTots})\r\n    this.setState({currentWithdrawTotals: newWithdrawTots})\r\n  }\r\n  \r\n\r\n   render() { \r\n    \r\n    return (\r\n    <Container className=\"addTopSpace\" maxWidth=\"lg\">\r\n      <Grid container spacing={1} direction=\"row\" alignItems=\"flex-start\" >\r\n        <Grid className=\"Banner\" item xs={12}>\r\n          <Paper className=\"GridPad\">\r\n            <Grid container justify=\"space-between\" alignItems=\"center\">\r\n              <Grid item>\r\n                <h3>Retirement Calculator</h3>\r\n                <p>Use the sliders to reflect the details of your retirement plan.  Estimated investment balances and withdrawals are shown.</p>\r\n                <p>Save scenarios to compare alternate plans.</p>\r\n              </Grid>\r\n              <Grid item>\r\n                Fix Y Axis: <Switch  checked={this.state.currentParams.fixYAxis} onChange={this.setStateHandler} name=\"fixYAxis\" color=\"primary\" />\r\n                <br /><br />\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.saveState}>\r\n                Save Scenario\r\n               </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={5}>\r\n          <Inputs startingAge={this.state.currentParams.startingAge}\r\n                invStartAge={this.state.currentParams.invStartAge}\r\n                invEndAge={this.state.currentParams.invEndAge}\r\n                oneTimeInvAge={this.state.currentParams.oneTimeInvAge}\r\n                withdrawAge={this.state.currentParams.withdrawAge}\r\n                startingInv={this.state.currentParams.startingInv}\r\n                annualInv={this.state.currentParams.annualInv}\r\n                oneTimeInv={this.state.currentParams.oneTimeInv}\r\n                invGrowth={this.state.currentParams.invGrowth}\r\n                withRate={this.state.currentParams.withRate}\r\n                setStateHandler={this.setStateHandler} />\r\n        </Grid>\r\n        <Grid item xs={7}>\r\n          <Paper className=\"removePaperMargin\">\r\n            <center><h4>Investment Balance</h4></center>\r\n            <Plots fixYAxis={this.state.currentParams.fixYAxis} lineToPlot={this.state.currentInvTotals} scenarios={this.state.savedInvTotals} yMax={5000000} />\r\n          </Paper>\r\n          <Paper className=\"removePaperMargin2\">\r\n            <center><h4>Annual Withdrawals</h4></center>\r\n            <Plots fixYAxis={this.state.currentParams.fixYAxis} lineToPlot={this.state.currentWithdrawTotals} scenarios={this.state.savedWithdrawTotals} yMax={200000}  />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12} >\r\n          <ScenTable scenarios={this.state.savedScenarios} />\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nclass ScenTable extends React.Component {\r\n  render() {\r\n    if(this.props.scenarios.length>0){\r\n     return (\r\n         <Paper>\r\n          <h4 style={{padding: \"20px\"}}>Parameters of Saved Scenarios</h4>\r\n          <TableContainer>\r\n            <Table >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"center\"></TableCell>\r\n                  <TableCell align=\"center\">Starting Age</TableCell>\r\n                  <TableCell align=\"center\">Starting Investment</TableCell>\r\n                  <TableCell align=\"center\">Investing Start Age</TableCell>\r\n                  <TableCell align=\"center\">Investing End Age</TableCell>\r\n                  <TableCell align=\"center\">Annual Investment</TableCell>\r\n                  <TableCell align=\"center\">One Time Inv. Age</TableCell>\r\n                  <TableCell align=\"center\">One Time Investment</TableCell>\r\n                  <TableCell align=\"center\">Inv Growth %</TableCell>\r\n                  <TableCell align=\"center\">Withdrawal Age</TableCell>\r\n                  <TableCell align=\"center\">Withdrawal %</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {this.props.scenarios.map((scen, index) => <TRow key={index} data = {scen} colorKey={index} scenName={\"Scenario # \" + (index+1)} />)}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n     )\r\n    } else {\r\n      return (<TableContainer />);\r\n    }\r\n  }\r\n}\r\n\r\nlet colors = [\"#56B4E9\", \"#009E73\", \"#F0E442\", \"#E69F00\", \"#D55E00\"];\r\n\r\nclass TRow extends React.Component {\r\n  render() {\r\n     return (\r\n          <TableRow  >\r\n            <TableCell align=\"center\" style={{color: colors[this.props.colorKey] }}>{this.props.scenName}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.startingAge}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.startingInv}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.invStartAge}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.invEndAge}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.annualInv}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.oneTimeInvAge}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.oneTimeInv}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.invGrowth}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.withdrawAge}</TableCell>\r\n            <TableCell align=\"center\">{this.props.data.withRate}</TableCell>\r\n          </TableRow>\r\n     );\r\n  }\r\n}\r\n\r\nclass Plots extends React.Component {\r\n  render() {\r\n\r\n    if(!this.props.fixYAxis){\r\n        return(\r\n          <FlexibleXYPlot  margin={{left: 80}} height={305} > \r\n           <XAxis />\r\n           <YAxis />\r\n           <LineSeries data={this.props.lineToPlot} color=\"black\" />\r\n           <LineSeries data={this.props.scenarios[0]} color=\"56B4E9\" />\r\n           <LineSeries data={this.props.scenarios[1]} color=\"009E73\" />\r\n           <LineSeries data={this.props.scenarios[2]} color=\"F0E442\"/>\r\n           <LineSeries data={this.props.scenarios[3]} color=\"E69F00\"/>\r\n           <LineSeries data={this.props.scenarios[4]} color=\"D55E00\"/>\r\n          </FlexibleXYPlot >   \r\n      )} else {\r\n        return(\r\n        <FlexibleXYPlot  margin={{left: 80}} height={305} yDomain ={[0,this.props.yMax]} > \r\n          <XAxis />\r\n          <YAxis />\r\n          <LineSeries data={this.props.lineToPlot} color=\"black\" />\r\n          <LineSeries data={this.props.scenarios[0]} color=\"56B4E9\" />\r\n          <LineSeries data={this.props.scenarios[1]} color=\"009E73\" />\r\n          <LineSeries data={this.props.scenarios[2]} color=\"F0E442\"/>\r\n          <LineSeries data={this.props.scenarios[3]} color=\"E69F00\"/>\r\n          <LineSeries data={this.props.scenarios[4]} color=\"D55E00\"/>\r\n        </FlexibleXYPlot >\r\n     )}\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nclass Inputs extends React.Component {\r\n  render() {\r\n    return( \r\n      <Grid container spacing={1}>\r\n        <Grid item xs={12}>\r\n          <Paper>\r\n            <Grid container alignItems=\"center\">\r\n              <Grid className=\"GridPad\" item xs={12}>\r\n                  I am&nbsp;<span className=\"intextVar\">{this.props.startingAge}</span>\r\n                  &nbsp;years old and plan to retire at&nbsp;<span className=\"intextVar\">{this.props.withdrawAge}</span>. \r\n                <Grid className=\"GridPad\" item xs={10}>\r\n                  <Slider id=\"startEndAge\" defaultValue = {[18,55]}  min={18} max={80} valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container alignItems=\"center\">\r\n              <Grid className=\"GridPad\" item xs={12}>\r\n                  I have&nbsp;<span className=\"intextVar\">${this.props.startingInv}</span>\r\n                  &nbsp;saved for retirement. \r\n                <Grid className=\"GridPad\" item xs={10} >\r\n                  <Slider id=\"startingInv\" min={0} max={500000} step={1000} defaultValue={5} valueLabelDisplay=\"auto\" \r\n                          onChangeCommitted={this.props.setStateHandler} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container alignItems=\"center\">\r\n              <Grid className=\"GridPad\" item xs={12}>\r\n                  I plan to invest starting at age&nbsp;<span className=\"intextVar\">{this.props.invStartAge}</span>\r\n                  &nbsp; and ending at age&nbsp;<span className=\"intextVar\">{this.props.invEndAge}</span>.\r\n                <Grid className=\"GridPad\" item xs={10} >\r\n                  <Slider id=\"invRange\" defaultValue = {[25, 55]} min={18} max={80} valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Grid container alignItems=\"center\">\r\n              <Grid className=\"GridPad\" item xs={12}>\r\n                  I plan to invest &nbsp;<span className=\"intextVar\">${this.props.annualInv}</span>\r\n                  &nbsp; annually.\r\n                <Grid className=\"GridPad\" item xs={10} >\r\n                  <Slider id=\"annualInv\" min={0} max={100000} step={1000} defaultValue={0}  valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n          </Paper>\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <Paper>\r\n            <Grid container>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                Age of One Time Investment or Expenditure:&nbsp;<span className=\"intextVar\">{this.props.oneTimeInvAge}</span>\r\n               <Tooltip placement=\"right\" title=\"In this section, use a positive value to see the impact of a one-time investment such as an employment bonus.  Use a negative value to see how retirement considerations are affected by an expenditure such as using retirement funds for a down payment.\">\r\n                 <IconButton aria-label=\"text2\">\r\n                   <InfoTwoToneIcon />\r\n                 </IconButton>\r\n               </Tooltip>\r\n\r\n              </Grid>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                <Slider id=\"oneTimeInvAge\"  min={18} max={80} defaultValue={30} valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                Value:&nbsp;<span className=\"intextVar\">${this.props.oneTimeInv}</span>\r\n              </Grid>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                <Slider id=\"oneTimeInv\" min={-100000} max={100000} step={5000} defaultValue={0}  valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Paper>\r\n            <Grid container>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                Annual Return:&nbsp;<span className=\"intextVar\">{this.props.invGrowth}%</span>\r\n              </Grid>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                <Slider id=\"invGrowth\"  min={0} max={10} defaultValue={7} valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                Withdrawal Rate:&nbsp;<span className=\"intextVar\">{this.props.withRate}%</span>\r\n              </Grid>\r\n              <Grid className=\"GridPad\" item xs={6}>\r\n                <Slider id=\"withRate\"  min={0} max={10} defaultValue={4} valueLabelDisplay=\"auto\" onChangeCommitted={this.props.setStateHandler} />\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}